<?xml version="1.0" encoding="UTF-8"?>
<!-- edited with XMLSpy v2010 (http://www.altova.com) by Claus Straube (Hochschule MÃ¼nchen SCE-catify) -->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://www.catify.com/api/1.0" targetNamespace="http://www.catify.com/api/1.0" elementFormDefault="unqualified" attributeFormDefault="unqualified">
	<!--
    #######################################
	#                          PIPELINE                        #
	#######################################
	-->
	<xs:element name="inPipeline" type="InPipeline"/>
	<xs:complexType name="Pipeline">
		<xs:sequence>
			<xs:element ref="endpoint">
				<xs:annotation>
					<xs:documentation>put in here you camel uri like "hazelcast:seda://foo". you can use all component properties.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element ref="correlation" minOccurs="0"/>
			<xs:element ref="variables" minOccurs="0"/>
		</xs:sequence>
	</xs:complexType>
	<xs:element name="variables" type="Variables"/>
	<xs:complexType name="Variables">
		<xs:sequence>
			<xs:element ref="variable" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:element name="variable" type="Variable"/>
	<xs:complexType name="Variable">
		<xs:attribute ref="name"/>
		<xs:attribute ref="xpath"/>
	</xs:complexType>
	<xs:complexType name="InPipeline">
		<xs:complexContent>
			<xs:extension base="Pipeline"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="outPipeline" type="OutPipeline"/>
	<xs:complexType name="OutPipeline">
		<xs:complexContent>
			<xs:extension base="Pipeline"/>
		</xs:complexContent>
	</xs:complexType>
	<!-- from...-->
	<xs:element name="fromEndpoint" type="Endpoint"/>
	<!-- to...-->
	<xs:element name="toEndpoint" type="Endpoint"/>
	<!-- endpoints -->
	<xs:element name="endpoint" type="Endpoint"/>
	<xs:complexType name="Endpoint">
		<xs:attribute ref="uri"/>
	</xs:complexType>
	<!-- correlation -->
	<xs:element name="correlation" type="Correlation"/>
	<xs:complexType name="Correlation">
		<xs:sequence>
			<xs:element ref="xpath" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:element name="xpath" type="xs:string"/>
	<xs:attribute name="xpath" type="xs:string"/>
	<!--
    #######################################
	#                          PROCESS                       #
	#######################################
	-->
	<xs:element name="process" type="Process"/>
	<xs:complexType name="Process">
		<xs:sequence>
			<xs:element ref="start"/>
			<xs:group ref="events" minOccurs="0"/>
			<xs:group ref="nodes" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:attribute name="accountName" type="xs:string" use="required"/>
		<xs:attribute name="processName" type="xs:string" use="required"/>
		<xs:attribute name="processVersion" type="xs:string" use="required"/>
		<xs:attribute name="processId" type="xs:string" use="optional"/>
	</xs:complexType>
	<xs:element name="start" type="Start"/>
	<xs:element name="request" type="Request"/>
	<xs:element name="reply" type="Reply"/>
	<xs:element name="receive" type="Receive"/>
	<xs:element name="fork" type="Fork"/>
	<xs:element name="decision" type="Decision"/>
	<xs:element name="sleep" type="Sleep"/>
	<xs:element name="end" type="End"/>
	<xs:element name="terminate" type="Terminate"/>
	<!--  -->
	<xs:element name="line" type="Line"/>
	<xs:element name="group" type="Group"/>
	<!-- events -->
	<xs:element name="timeEvent" type="TimeEvent"/>
	<xs:element name="messageEvent" type="MessageEvent"/>
	<xs:element name="exceptionEvent" type="ExceptionEvent"/>
	<!-- base types -->
	<xs:complexType name="Node">
		<xs:attribute ref="name" use="optional"/>
		<xs:attribute ref="id" use="optional"/>
	</xs:complexType>
	<xs:complexType name="SplitNode">
		<xs:complexContent>
			<xs:extension base="Node">
				<xs:sequence>
					<xs:element ref="timeEvent" minOccurs="0"/>
					<xs:element ref="line" minOccurs="2" maxOccurs="unbounded"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="ServiceNode">
		<xs:complexContent>
			<xs:extension base="Node">
				<xs:sequence>
					<xs:element ref="exceptionEvent" minOccurs="0" maxOccurs="unbounded"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="StructureNode">
		<xs:complexContent>
			<xs:extension base="Node">
				<xs:sequence>
					<xs:group ref="nodes" maxOccurs="unbounded"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- complex types -->
	<xs:complexType name="Start">
		<xs:complexContent>
			<xs:extension base="Node">
				<xs:sequence>
					<xs:element ref="inPipeline" minOccurs="0"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="Request">
		<xs:complexContent>
			<xs:extension base="ServiceNode">
				<xs:sequence>
					<xs:element ref="outPipeline" minOccurs="0"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="Receive">
		<xs:complexContent>
			<xs:extension base="ServiceNode">
				<xs:sequence>
					<xs:element ref="timeEvent" minOccurs="0"/>
					<xs:element ref="inPipeline" minOccurs="0"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="Reply">
		<xs:complexContent>
			<xs:extension base="ServiceNode">
				<xs:sequence>
					<xs:element ref="outPipeline" minOccurs="0"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="Fork">
		<xs:complexContent>
			<xs:extension base="SplitNode">
				<xs:attribute ref="receivingLines"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="Decision">
		<xs:complexContent>
			<xs:extension base="SplitNode"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="Line">
		<xs:complexContent>
			<xs:extension base="StructureNode"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="Group">
		<xs:complexContent>
			<xs:extension base="StructureNode">
				<xs:sequence>
					<xs:group ref="events" minOccurs="0"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="Sleep">
		<xs:complexContent>
			<xs:extension base="Node">
				<xs:sequence>
					<xs:element ref="timeEvent"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="Terminate">
		<xs:complexContent>
			<xs:extension base="Node"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="TimeEvent">
		<xs:complexContent>
			<xs:extension base="StructureNode">
				<xs:attribute ref="time" use="required"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="MessageEvent">
		<xs:complexContent>
			<xs:extension base="StructureNode"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="ExceptionEvent">
		<xs:complexContent>
			<xs:extension base="StructureNode">
				<xs:attribute ref="type" use="required"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="End">
		<xs:complexContent>
			<xs:extension base="Node"/>
		</xs:complexContent>
	</xs:complexType>
	<!-- groups -->
	<xs:group name="nodes">
		<xs:choice>
			<xs:element ref="request"/>
			<xs:element ref="reply"/>
			<xs:element ref="receive"/>
			<xs:element ref="fork"/>
			<xs:element ref="decision"/>
			<xs:element ref="sleep"/>
			<xs:element ref="group"/>
			<xs:element ref="terminate"/>
			<xs:element ref="end"/>
		</xs:choice>
	</xs:group>
	<xs:group name="events">
		<xs:sequence>
			<xs:element ref="messageEvent" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element ref="timeEvent" minOccurs="0"/>
			<xs:element ref="exceptionEvent" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:group>
	<!-- attributes -->
	<xs:attribute name="name" type="xs:string"/>
	<xs:attribute name="time" type="xs:long"/>
	<xs:attribute name="reference" type="xs:string"/>
	<xs:attribute name="type" type="xs:string"/>
	<xs:attribute name="id" type="xs:string"/>
	<xs:attribute name="uri" type="xs:string"/>
	<xs:attribute name="operation" type="xs:string"/>
	<xs:attribute name="receivingLines" type="xs:int" default="-1"/>
</xs:schema>